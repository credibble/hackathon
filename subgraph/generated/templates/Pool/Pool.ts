// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BorrowedPool extends ethereum.Event {
  get params(): BorrowedPool__Params {
    return new BorrowedPool__Params(this);
  }
}

export class BorrowedPool__Params {
  _event: BorrowedPool;

  constructor(event: BorrowedPool) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dueAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimedWithdrawPool extends ethereum.Event {
  get params(): ClaimedWithdrawPool__Params {
    return new ClaimedWithdrawPool__Params(this);
  }
}

export class ClaimedWithdrawPool__Params {
  _event: ClaimedWithdrawPool;

  constructor(event: ClaimedWithdrawPool) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositedPool extends ethereum.Event {
  get params(): DepositedPool__Params {
    return new DepositedPool__Params(this);
  }
}

export class DepositedPool__Params {
  _event: DepositedPool;

  constructor(event: DepositedPool) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InitializedPool extends ethereum.Event {
  get params(): InitializedPool__Params {
    return new InitializedPool__Params(this);
  }
}

export class InitializedPool__Params {
  _event: InitializedPool;

  constructor(event: InitializedPool) {
    this._event = event;
  }

  get sharesToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NativeTransferFailed extends ethereum.Event {
  get params(): NativeTransferFailed__Params {
    return new NativeTransferFailed__Params(this);
  }
}

export class NativeTransferFailed__Params {
  _event: NativeTransferFailed;

  constructor(event: NativeTransferFailed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RepaidPool extends ethereum.Event {
  get params(): RepaidPool__Params {
    return new RepaidPool__Params(this);
  }
}

export class RepaidPool__Params {
  _event: RepaidPool;

  constructor(event: RepaidPool) {
    this._event = event;
  }

  get repayer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RequestedWithdrawPool extends ethereum.Event {
  get params(): RequestedWithdrawPool__Params {
    return new RequestedWithdrawPool__Params(this);
  }
}

export class RequestedWithdrawPool__Params {
  _event: RequestedWithdrawPool;

  constructor(event: RequestedWithdrawPool) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetBorrowApy extends ethereum.Event {
  get params(): SetBorrowApy__Params {
    return new SetBorrowApy__Params(this);
  }
}

export class SetBorrowApy__Params {
  _event: SetBorrowApy;

  constructor(event: SetBorrowApy) {
    this._event = event;
  }

  get borrowAPY(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetLockPeriod extends ethereum.Event {
  get params(): SetLockPeriod__Params {
    return new SetLockPeriod__Params(this);
  }
}

export class SetLockPeriod__Params {
  _event: SetLockPeriod;

  constructor(event: SetLockPeriod) {
    this._event = event;
  }

  get lockPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetWithdrawDelay extends ethereum.Event {
  get params(): SetWithdrawDelay__Params {
    return new SetWithdrawDelay__Params(this);
  }
}

export class SetWithdrawDelay__Params {
  _event: SetWithdrawDelay;

  constructor(event: SetWithdrawDelay) {
    this._event = event;
  }

  get withdrawDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawCancelledPool extends ethereum.Event {
  get params(): WithdrawCancelledPool__Params {
    return new WithdrawCancelledPool__Params(this);
  }
}

export class WithdrawCancelledPool__Params {
  _event: WithdrawCancelledPool;

  constructor(event: WithdrawCancelledPool) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  INITIAL_LP(): BigInt {
    let result = super.call("INITIAL_LP", "INITIAL_LP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INITIAL_LP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("INITIAL_LP", "INITIAL_LP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  YEAR(): BigInt {
    let result = super.call("YEAR", "YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("YEAR", "YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  availableLiquidity(): BigInt {
    let result = super.call(
      "availableLiquidity",
      "availableLiquidity():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_availableLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableLiquidity",
      "availableLiquidity():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(amount: BigInt): BigInt {
    let result = super.call("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBigInt();
  }

  try_borrow(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowAPY(): BigInt {
    let result = super.call("borrowAPY", "borrowAPY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_borrowAPY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowAPY", "borrowAPY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  credit(): Address {
    let result = super.call("credit", "credit():(address)", []);

    return result[0].toAddress();
  }

  try_credit(): ethereum.CallResult<Address> {
    let result = super.tryCall("credit", "credit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockPeriod(): BigInt {
    let result = super.call("lockPeriod", "lockPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockPeriod", "lockPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  positionToken(): Address {
    let result = super.call("positionToken", "positionToken():(address)", []);

    return result[0].toAddress();
  }

  try_positionToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionToken",
      "positionToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sharesToken(): Address {
    let result = super.call("sharesToken", "sharesToken():(address)", []);

    return result[0].toAddress();
  }

  try_sharesToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("sharesToken", "sharesToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalBorrowed(): BigInt {
    let result = super.call("totalBorrowed", "totalBorrowed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowed",
      "totalBorrowed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTVL(): BigInt {
    let result = super.call("totalTVL", "totalTVL():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTVL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTVL", "totalTVL():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawDelay(): BigInt {
    let result = super.call("withdrawDelay", "withdrawDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawDelay",
      "withdrawDelay():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _config(): ConstructorCall_configStruct {
    return changetype<ConstructorCall_configStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get comptroller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_configStruct extends ethereum.Tuple {
  get symbol(): string {
    return this[0].toString();
  }

  get asset(): Address {
    return this[1].toAddress();
  }

  get credit(): Address {
    return this[2].toAddress();
  }

  get lockPeriod(): BigInt {
    return this[3].toBigInt();
  }

  get withdrawDelay(): BigInt {
    return this[4].toBigInt();
  }

  get borrowAPY(): BigInt {
    return this[5].toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelWithdrawCall extends ethereum.Call {
  get inputs(): CancelWithdrawCall__Inputs {
    return new CancelWithdrawCall__Inputs(this);
  }

  get outputs(): CancelWithdrawCall__Outputs {
    return new CancelWithdrawCall__Outputs(this);
  }
}

export class CancelWithdrawCall__Inputs {
  _call: CancelWithdrawCall;

  constructor(call: CancelWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelWithdrawCall__Outputs {
  _call: CancelWithdrawCall;

  constructor(call: CancelWithdrawCall) {
    this._call = call;
  }
}

export class ClaimWithdrawCall extends ethereum.Call {
  get inputs(): ClaimWithdrawCall__Inputs {
    return new ClaimWithdrawCall__Inputs(this);
  }

  get outputs(): ClaimWithdrawCall__Outputs {
    return new ClaimWithdrawCall__Outputs(this);
  }
}

export class ClaimWithdrawCall__Inputs {
  _call: ClaimWithdrawCall;

  constructor(call: ClaimWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimWithdrawCall__Outputs {
  _call: ClaimWithdrawCall;

  constructor(call: ClaimWithdrawCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class RepayAllCall extends ethereum.Call {
  get inputs(): RepayAllCall__Inputs {
    return new RepayAllCall__Inputs(this);
  }

  get outputs(): RepayAllCall__Outputs {
    return new RepayAllCall__Outputs(this);
  }
}

export class RepayAllCall__Inputs {
  _call: RepayAllCall;

  constructor(call: RepayAllCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayAllCall__Outputs {
  _call: RepayAllCall;

  constructor(call: RepayAllCall) {
    this._call = call;
  }
}

export class RequestWithdrawCall extends ethereum.Call {
  get inputs(): RequestWithdrawCall__Inputs {
    return new RequestWithdrawCall__Inputs(this);
  }

  get outputs(): RequestWithdrawCall__Outputs {
    return new RequestWithdrawCall__Outputs(this);
  }
}

export class RequestWithdrawCall__Inputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get shareAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestWithdrawCall__Outputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
