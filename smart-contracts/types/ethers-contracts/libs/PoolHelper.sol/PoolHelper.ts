/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, FunctionFragment, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener } from "../../common.js"
  

  export interface PoolHelperInterface extends Interface {
    

    getEvent(nameOrSignatureOrTopic: "BorrowedPool" | "ClaimedWithdrawPool" | "DepositedPool" | "InitializedPool" | "RepaidPool" | "RequestedWithdrawPool" | "SetBorrowApy" | "SetLockPeriod" | "SetWithdrawDelay" | "WithdrawCancelledPool"): EventFragment;

    

    
  }

  
    export namespace BorrowedPoolEvent {
      export type InputTuple = [borrower: AddressLike, tokenId: BigNumberish, amount: BigNumberish, dueAmount: BigNumberish];
      export type OutputTuple = [borrower: string, tokenId: bigint, amount: bigint, dueAmount: bigint];
      export interface OutputObject {borrower: string, tokenId: bigint, amount: bigint, dueAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClaimedWithdrawPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, amountOut: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, amountOut: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, amountOut: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DepositedPoolEvent {
      export type InputTuple = [owner: AddressLike, amount: BigNumberish, shares: BigNumberish, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, amount: bigint, shares: bigint, tokenId: bigint];
      export interface OutputObject {owner: string, amount: bigint, shares: bigint, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedPoolEvent {
      export type InputTuple = [sharesToken: AddressLike, positionToken: AddressLike];
      export type OutputTuple = [sharesToken: string, positionToken: string];
      export interface OutputObject {sharesToken: string, positionToken: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RepaidPoolEvent {
      export type InputTuple = [repayer: AddressLike, tokenId: BigNumberish, amount: BigNumberish, interest: BigNumberish];
      export type OutputTuple = [repayer: string, tokenId: bigint, amount: bigint, interest: bigint];
      export interface OutputObject {repayer: string, tokenId: bigint, amount: bigint, interest: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequestedWithdrawPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, shares: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetBorrowApyEvent {
      export type InputTuple = [borrowAPY: BigNumberish];
      export type OutputTuple = [borrowAPY: bigint];
      export interface OutputObject {borrowAPY: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetLockPeriodEvent {
      export type InputTuple = [lockPeriod: BigNumberish];
      export type OutputTuple = [lockPeriod: bigint];
      export interface OutputObject {lockPeriod: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetWithdrawDelayEvent {
      export type InputTuple = [withdrawDelay: BigNumberish];
      export type OutputTuple = [withdrawDelay: bigint];
      export interface OutputObject {withdrawDelay: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawCancelledPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, shares: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PoolHelper extends BaseContract {
    
    connect(runner?: ContractRunner | null): PoolHelper;
    waitForDeployment(): Promise<this>;

    interface: PoolHelperInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    

    getEvent(key: 'BorrowedPool'): TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
getEvent(key: 'ClaimedWithdrawPool'): TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
getEvent(key: 'DepositedPool'): TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
getEvent(key: 'InitializedPool'): TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
getEvent(key: 'RepaidPool'): TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
getEvent(key: 'RequestedWithdrawPool'): TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
getEvent(key: 'SetBorrowApy'): TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
getEvent(key: 'SetLockPeriod'): TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
getEvent(key: 'SetWithdrawDelay'): TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
getEvent(key: 'WithdrawCancelledPool'): TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;

    filters: {
      
      'BorrowedPool(address,uint256,uint256,uint256)': TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
      BorrowedPool: TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
    

      'ClaimedWithdrawPool(address,uint256,uint256)': TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
      ClaimedWithdrawPool: TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
    

      'DepositedPool(address,uint256,uint256,uint256)': TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
      DepositedPool: TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
    

      'InitializedPool(address,address)': TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
      InitializedPool: TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
    

      'RepaidPool(address,uint256,uint256,uint256)': TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
      RepaidPool: TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
    

      'RequestedWithdrawPool(address,uint256,uint256)': TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
      RequestedWithdrawPool: TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
    

      'SetBorrowApy(uint256)': TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
      SetBorrowApy: TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
    

      'SetLockPeriod(uint256)': TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
      SetLockPeriod: TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
    

      'SetWithdrawDelay(uint256)': TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
      SetWithdrawDelay: TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
    

      'WithdrawCancelledPool(address,uint256,uint256)': TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;
      WithdrawCancelledPool: TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;
    
    };
  }