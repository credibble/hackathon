/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace Pool {
      
    export type ConfigStruct = {symbol: string, asset: AddressLike, credit: AddressLike, lockPeriod: BigNumberish, withdrawDelay: BigNumberish, borrowAPY: BigNumberish}

    export type ConfigStructOutput = [symbol: string, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint] & {symbol: string, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint }
  
    }

  export interface PoolInterface extends Interface {
    getFunction(nameOrSignature: "INITIAL_LP" | "YEAR" | "asset" | "availableLiquidity" | "borrow" | "borrowAPY" | "cancelWithdraw" | "claimWithdraw" | "credit" | "deposit" | "lockPeriod" | "owner" | "pause" | "paused" | "positionToken" | "renounceOwnership" | "repay" | "repayAll" | "requestWithdraw" | "sharesToken" | "totalBorrowed" | "totalShares" | "totalTVL" | "transferOwnership" | "unpause" | "withdrawDelay"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BorrowedPool" | "ClaimedWithdrawPool" | "DepositedPool" | "InitializedPool" | "NativeTransferFailed" | "OwnershipTransferred" | "Paused" | "RepaidPool" | "RequestedWithdrawPool" | "SetBorrowApy" | "SetLockPeriod" | "SetWithdrawDelay" | "Unpaused" | "WithdrawCancelledPool"): EventFragment;

    encodeFunctionData(functionFragment: 'INITIAL_LP', values?: undefined): string;
encodeFunctionData(functionFragment: 'YEAR', values?: undefined): string;
encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
encodeFunctionData(functionFragment: 'availableLiquidity', values?: undefined): string;
encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'borrowAPY', values?: undefined): string;
encodeFunctionData(functionFragment: 'cancelWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'claimWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'credit', values?: undefined): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'lockPeriod', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'positionToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'repayAll', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'requestWithdraw', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'sharesToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalBorrowed', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalTVL', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawDelay', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'INITIAL_LP', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'YEAR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'availableLiquidity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowAPY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'credit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lockPeriod', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'positionToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repayAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'sharesToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalBorrowed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalTVL', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawDelay', data: BytesLike): Result;
  }

  
    export namespace BorrowedPoolEvent {
      export type InputTuple = [borrower: AddressLike, tokenId: BigNumberish, amount: BigNumberish, dueAmount: BigNumberish];
      export type OutputTuple = [borrower: string, tokenId: bigint, amount: bigint, dueAmount: bigint];
      export interface OutputObject {borrower: string, tokenId: bigint, amount: bigint, dueAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClaimedWithdrawPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, amountOut: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, amountOut: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, amountOut: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DepositedPoolEvent {
      export type InputTuple = [owner: AddressLike, amount: BigNumberish, shares: BigNumberish, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, amount: bigint, shares: bigint, tokenId: bigint];
      export interface OutputObject {owner: string, amount: bigint, shares: bigint, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedPoolEvent {
      export type InputTuple = [sharesToken: AddressLike, positionToken: AddressLike];
      export type OutputTuple = [sharesToken: string, positionToken: string];
      export interface OutputObject {sharesToken: string, positionToken: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace NativeTransferFailedEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RepaidPoolEvent {
      export type InputTuple = [repayer: AddressLike, tokenId: BigNumberish, amount: BigNumberish, interest: BigNumberish];
      export type OutputTuple = [repayer: string, tokenId: bigint, amount: bigint, interest: bigint];
      export interface OutputObject {repayer: string, tokenId: bigint, amount: bigint, interest: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequestedWithdrawPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, shares: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetBorrowApyEvent {
      export type InputTuple = [borrowAPY: BigNumberish];
      export type OutputTuple = [borrowAPY: bigint];
      export interface OutputObject {borrowAPY: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetLockPeriodEvent {
      export type InputTuple = [lockPeriod: BigNumberish];
      export type OutputTuple = [lockPeriod: bigint];
      export interface OutputObject {lockPeriod: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SetWithdrawDelayEvent {
      export type InputTuple = [withdrawDelay: BigNumberish];
      export type OutputTuple = [withdrawDelay: bigint];
      export interface OutputObject {withdrawDelay: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawCancelledPoolEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, shares: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, shares: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Pool extends BaseContract {
    
    connect(runner?: ContractRunner | null): Pool;
    waitForDeployment(): Promise<this>;

    interface: PoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    INITIAL_LP: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    YEAR: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    asset: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    availableLiquidity: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    borrow: TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    borrowAPY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    cancelWithdraw: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    claimWithdraw: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    credit: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    deposit: TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'payable'
    >
    

    
    lockPeriod: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    positionToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    repay: TypedContractMethod<
      [tokenId: BigNumberish, amount: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    repayAll: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    requestWithdraw: TypedContractMethod<
      [tokenId: BigNumberish, shareAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    sharesToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalBorrowed: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalShares: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalTVL: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdrawDelay: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'INITIAL_LP'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'YEAR'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'asset'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'availableLiquidity'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'borrow'): TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowAPY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelWithdraw'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimWithdraw'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'credit'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'lockPeriod'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'positionToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'repay'): TypedContractMethod<
      [tokenId: BigNumberish, amount: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'repayAll'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'requestWithdraw'): TypedContractMethod<
      [tokenId: BigNumberish, shareAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'sharesToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalBorrowed'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalShares'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalTVL'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawDelay'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'BorrowedPool'): TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
getEvent(key: 'ClaimedWithdrawPool'): TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
getEvent(key: 'DepositedPool'): TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
getEvent(key: 'InitializedPool'): TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
getEvent(key: 'NativeTransferFailed'): TypedContractEvent<NativeTransferFailedEvent.InputTuple, NativeTransferFailedEvent.OutputTuple, NativeTransferFailedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'RepaidPool'): TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
getEvent(key: 'RequestedWithdrawPool'): TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
getEvent(key: 'SetBorrowApy'): TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
getEvent(key: 'SetLockPeriod'): TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
getEvent(key: 'SetWithdrawDelay'): TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
getEvent(key: 'WithdrawCancelledPool'): TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;

    filters: {
      
      'BorrowedPool(address,uint256,uint256,uint256)': TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
      BorrowedPool: TypedContractEvent<BorrowedPoolEvent.InputTuple, BorrowedPoolEvent.OutputTuple, BorrowedPoolEvent.OutputObject>;
    

      'ClaimedWithdrawPool(address,uint256,uint256)': TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
      ClaimedWithdrawPool: TypedContractEvent<ClaimedWithdrawPoolEvent.InputTuple, ClaimedWithdrawPoolEvent.OutputTuple, ClaimedWithdrawPoolEvent.OutputObject>;
    

      'DepositedPool(address,uint256,uint256,uint256)': TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
      DepositedPool: TypedContractEvent<DepositedPoolEvent.InputTuple, DepositedPoolEvent.OutputTuple, DepositedPoolEvent.OutputObject>;
    

      'InitializedPool(address,address)': TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
      InitializedPool: TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
    

      'NativeTransferFailed(address,uint256)': TypedContractEvent<NativeTransferFailedEvent.InputTuple, NativeTransferFailedEvent.OutputTuple, NativeTransferFailedEvent.OutputObject>;
      NativeTransferFailed: TypedContractEvent<NativeTransferFailedEvent.InputTuple, NativeTransferFailedEvent.OutputTuple, NativeTransferFailedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'RepaidPool(address,uint256,uint256,uint256)': TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
      RepaidPool: TypedContractEvent<RepaidPoolEvent.InputTuple, RepaidPoolEvent.OutputTuple, RepaidPoolEvent.OutputObject>;
    

      'RequestedWithdrawPool(address,uint256,uint256)': TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
      RequestedWithdrawPool: TypedContractEvent<RequestedWithdrawPoolEvent.InputTuple, RequestedWithdrawPoolEvent.OutputTuple, RequestedWithdrawPoolEvent.OutputObject>;
    

      'SetBorrowApy(uint256)': TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
      SetBorrowApy: TypedContractEvent<SetBorrowApyEvent.InputTuple, SetBorrowApyEvent.OutputTuple, SetBorrowApyEvent.OutputObject>;
    

      'SetLockPeriod(uint256)': TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
      SetLockPeriod: TypedContractEvent<SetLockPeriodEvent.InputTuple, SetLockPeriodEvent.OutputTuple, SetLockPeriodEvent.OutputObject>;
    

      'SetWithdrawDelay(uint256)': TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
      SetWithdrawDelay: TypedContractEvent<SetWithdrawDelayEvent.InputTuple, SetWithdrawDelayEvent.OutputTuple, SetWithdrawDelayEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    

      'WithdrawCancelledPool(address,uint256,uint256)': TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;
      WithdrawCancelledPool: TypedContractEvent<WithdrawCancelledPoolEvent.InputTuple, WithdrawCancelledPoolEvent.OutputTuple, WithdrawCancelledPoolEvent.OutputObject>;
    
    };
  }