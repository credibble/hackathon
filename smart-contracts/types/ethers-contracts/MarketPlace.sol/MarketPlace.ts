/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MarketPlaceInterface extends Interface {
    getFunction(nameOrSignature: "addAllowed" | "allowedShares" | "delist" | "list" | "listings" | "owner" | "purchase" | "renounceOwnership" | "totalListings" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Delisted" | "Listed" | "OwnershipTransferred" | "Purchased"): EventFragment;

    encodeFunctionData(functionFragment: 'addAllowed', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'allowedShares', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'delist', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'list', values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'listings', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'purchase', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalListings', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'addAllowed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allowedShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'delist', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'list', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalListings', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace DelistedEvent {
      export type InputTuple = [id: BigNumberish];
      export type OutputTuple = [id: bigint];
      export interface OutputObject {id: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ListedEvent {
      export type InputTuple = [id: BigNumberish, seller: AddressLike, shares: AddressLike, paymentToken: AddressLike, price: BigNumberish, expiresIn: BigNumberish, vault: AddressLike, vaultTokenId: BigNumberish];
      export type OutputTuple = [id: bigint, seller: string, shares: string, paymentToken: string, price: bigint, expiresIn: bigint, vault: string, vaultTokenId: bigint];
      export interface OutputObject {id: bigint, seller: string, shares: string, paymentToken: string, price: bigint, expiresIn: bigint, vault: string, vaultTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PurchasedEvent {
      export type InputTuple = [id: BigNumberish, buyer: AddressLike];
      export type OutputTuple = [id: bigint, buyer: string];
      export interface OutputObject {id: bigint, buyer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MarketPlace extends BaseContract {
    
    connect(runner?: ContractRunner | null): MarketPlace;
    waitForDeployment(): Promise<this>;

    interface: MarketPlaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addAllowed: TypedContractMethod<
      [_shares: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    allowedShares: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    delist: TypedContractMethod<
      [_id: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    list: TypedContractMethod<
      [_shares: AddressLike, _tokenId: BigNumberish, _paymentToken: AddressLike, _price: BigNumberish, _expiresIn: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    listings: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, string, bigint, bigint] & {vault: string, seller: string, shares: string, tokenId: bigint, paymentToken: string, price: bigint, expiresIn: bigint }],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    purchase: TypedContractMethod<
      [_id: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    totalListings: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addAllowed'): TypedContractMethod<
      [_shares: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'allowedShares'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'delist'): TypedContractMethod<
      [_id: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'list'): TypedContractMethod<
      [_shares: AddressLike, _tokenId: BigNumberish, _paymentToken: AddressLike, _price: BigNumberish, _expiresIn: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'listings'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, string, bigint, bigint] & {vault: string, seller: string, shares: string, tokenId: bigint, paymentToken: string, price: bigint, expiresIn: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'purchase'): TypedContractMethod<
      [_id: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalListings'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Delisted'): TypedContractEvent<DelistedEvent.InputTuple, DelistedEvent.OutputTuple, DelistedEvent.OutputObject>;
getEvent(key: 'Listed'): TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Purchased'): TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;

    filters: {
      
      'Delisted(uint256)': TypedContractEvent<DelistedEvent.InputTuple, DelistedEvent.OutputTuple, DelistedEvent.OutputObject>;
      Delisted: TypedContractEvent<DelistedEvent.InputTuple, DelistedEvent.OutputTuple, DelistedEvent.OutputObject>;
    

      'Listed(uint256,address,address,address,uint256,uint256,address,uint256)': TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
      Listed: TypedContractEvent<ListedEvent.InputTuple, ListedEvent.OutputTuple, ListedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Purchased(uint256,address)': TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;
      Purchased: TypedContractEvent<PurchasedEvent.InputTuple, PurchasedEvent.OutputTuple, PurchasedEvent.OutputObject>;
    
    };
  }