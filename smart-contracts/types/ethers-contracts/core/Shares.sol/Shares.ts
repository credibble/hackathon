/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface SharesInterface extends Interface {
    getFunction(nameOrSignature: "addShares" | "approve" | "balanceOf" | "claimShares" | "getApproved" | "getInfo" | "getSharesTokenId" | "isApprovedForAll" | "name" | "onlySharesOwner" | "ownerOf" | "ownerToTokenId" | "pool" | "removeShares" | "revertShares" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "sharesInfo" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AddedShares" | "Approval" | "ApprovalForAll" | "ClaimedShares" | "ClosedShares" | "RemovedShares" | "RevertShares" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'addShares', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'claimShares', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getSharesTokenId', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'onlySharesOwner', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'ownerToTokenId', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeShares', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'revertShares', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'sharesInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSharesTokenId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'onlySharesOwner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerToTokenId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revertShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'sharesInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  }

  
    export namespace AddedSharesEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, amount: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, amount: bigint, timestamp: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, amount: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClaimedSharesEvent {
      export type InputTuple = [tokenId: BigNumberish];
      export type OutputTuple = [tokenId: bigint];
      export interface OutputObject {tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClosedSharesEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint];
      export interface OutputObject {owner: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RemovedSharesEvent {
      export type InputTuple = [owner: AddressLike, tokenId: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [owner: string, tokenId: bigint, amount: bigint];
      export interface OutputObject {owner: string, tokenId: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RevertSharesEvent {
      export type InputTuple = [tokenId: BigNumberish, lockedAmount: BigNumberish];
      export type OutputTuple = [tokenId: bigint, lockedAmount: bigint];
      export interface OutputObject {tokenId: bigint, lockedAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Shares extends BaseContract {
    
    connect(runner?: ContractRunner | null): Shares;
    waitForDeployment(): Promise<this>;

    interface: SharesInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addShares: TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    claimShares: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getInfo: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint]],
      'view'
    >
    

    
    getSharesTokenId: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    onlySharesOwner: TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    ownerToTokenId: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    pool: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeShares: TypedContractMethod<
      [owner: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revertShares: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    sharesInfo: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint] & {amount: bigint, lockedAmount: bigint, timestamp: bigint, withdrawalRequested: boolean, withdrawRequestTime: bigint }],
      'view'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addShares'): TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'claimShares'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getInfo'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint]],
      'view'
    >;
getFunction(nameOrSignature: 'getSharesTokenId'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'onlySharesOwner'): TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerToTokenId'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'pool'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeShares'): TypedContractMethod<
      [owner: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revertShares'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'sharesInfo'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint] & {amount: bigint, lockedAmount: bigint, timestamp: bigint, withdrawalRequested: boolean, withdrawRequestTime: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AddedShares'): TypedContractEvent<AddedSharesEvent.InputTuple, AddedSharesEvent.OutputTuple, AddedSharesEvent.OutputObject>;
getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'ClaimedShares'): TypedContractEvent<ClaimedSharesEvent.InputTuple, ClaimedSharesEvent.OutputTuple, ClaimedSharesEvent.OutputObject>;
getEvent(key: 'ClosedShares'): TypedContractEvent<ClosedSharesEvent.InputTuple, ClosedSharesEvent.OutputTuple, ClosedSharesEvent.OutputObject>;
getEvent(key: 'RemovedShares'): TypedContractEvent<RemovedSharesEvent.InputTuple, RemovedSharesEvent.OutputTuple, RemovedSharesEvent.OutputObject>;
getEvent(key: 'RevertShares'): TypedContractEvent<RevertSharesEvent.InputTuple, RevertSharesEvent.OutputTuple, RevertSharesEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'AddedShares(address,uint256,uint256,uint256)': TypedContractEvent<AddedSharesEvent.InputTuple, AddedSharesEvent.OutputTuple, AddedSharesEvent.OutputObject>;
      AddedShares: TypedContractEvent<AddedSharesEvent.InputTuple, AddedSharesEvent.OutputTuple, AddedSharesEvent.OutputObject>;
    

      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'ClaimedShares(uint256)': TypedContractEvent<ClaimedSharesEvent.InputTuple, ClaimedSharesEvent.OutputTuple, ClaimedSharesEvent.OutputObject>;
      ClaimedShares: TypedContractEvent<ClaimedSharesEvent.InputTuple, ClaimedSharesEvent.OutputTuple, ClaimedSharesEvent.OutputObject>;
    

      'ClosedShares(address,uint256)': TypedContractEvent<ClosedSharesEvent.InputTuple, ClosedSharesEvent.OutputTuple, ClosedSharesEvent.OutputObject>;
      ClosedShares: TypedContractEvent<ClosedSharesEvent.InputTuple, ClosedSharesEvent.OutputTuple, ClosedSharesEvent.OutputObject>;
    

      'RemovedShares(address,uint256,uint256)': TypedContractEvent<RemovedSharesEvent.InputTuple, RemovedSharesEvent.OutputTuple, RemovedSharesEvent.OutputObject>;
      RemovedShares: TypedContractEvent<RemovedSharesEvent.InputTuple, RemovedSharesEvent.OutputTuple, RemovedSharesEvent.OutputObject>;
    

      'RevertShares(uint256,uint256)': TypedContractEvent<RevertSharesEvent.InputTuple, RevertSharesEvent.OutputTuple, RevertSharesEvent.OutputObject>;
      RevertShares: TypedContractEvent<RevertSharesEvent.InputTuple, RevertSharesEvent.OutputTuple, RevertSharesEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }