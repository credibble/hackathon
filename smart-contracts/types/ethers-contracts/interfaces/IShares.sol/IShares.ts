/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface ISharesInterface extends Interface {
    getFunction(nameOrSignature: "addShares" | "claimShares" | "getInfo" | "getSharesTokenId" | "onlySharesOwner" | "removeShares" | "revertShares"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'addShares', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'claimShares', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getSharesTokenId', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'onlySharesOwner', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'removeShares', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'revertShares', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSharesTokenId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'onlySharesOwner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revertShares', data: BytesLike): Result;
  }

  

  export interface IShares extends BaseContract {
    
    connect(runner?: ContractRunner | null): IShares;
    waitForDeployment(): Promise<this>;

    interface: ISharesInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addShares: TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    claimShares: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getInfo: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint] & {amount: bigint, lockedAmount: bigint, timestamp: bigint, withdrawalRequested: boolean, withdrawRequestTime: bigint }],
      'view'
    >
    

    
    getSharesTokenId: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    onlySharesOwner: TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >
    

    
    removeShares: TypedContractMethod<
      [owner: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    revertShares: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addShares'): TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimShares'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getInfo'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint, boolean, bigint] & {amount: bigint, lockedAmount: bigint, timestamp: bigint, withdrawalRequested: boolean, withdrawRequestTime: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getSharesTokenId'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'onlySharesOwner'): TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >;
getFunction(nameOrSignature: 'removeShares'): TypedContractMethod<
      [owner: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revertShares'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;

    

    filters: {
      
    };
  }