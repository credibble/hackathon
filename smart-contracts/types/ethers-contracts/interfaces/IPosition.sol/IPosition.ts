/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface IPositionInterface extends Interface {
    getFunction(nameOrSignature: "decrementPosition" | "getInfo" | "getPositionTokenId" | "incrementPosition" | "onlyPositionOwner"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'decrementPosition', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPositionTokenId', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'incrementPosition', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'onlyPositionOwner', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'decrementPosition', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPositionTokenId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'incrementPosition', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'onlyPositionOwner', data: BytesLike): Result;
  }

  

  export interface IPosition extends BaseContract {
    
    connect(runner?: ContractRunner | null): IPosition;
    waitForDeployment(): Promise<this>;

    interface: IPositionInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    decrementPosition: TypedContractMethod<
      [tokenId: BigNumberish, repayAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getInfo: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint] & {amount: bigint, dueAmount: bigint, timestamp: bigint }],
      'view'
    >
    

    
    getPositionTokenId: TypedContractMethod<
      [borrower: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    incrementPosition: TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, dueAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    onlyPositionOwner: TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'decrementPosition'): TypedContractMethod<
      [tokenId: BigNumberish, repayAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getInfo'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[bigint, bigint, bigint] & {amount: bigint, dueAmount: bigint, timestamp: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getPositionTokenId'): TypedContractMethod<
      [borrower: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'incrementPosition'): TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, dueAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'onlyPositionOwner'): TypedContractMethod<
      [owner: AddressLike, tokenId: BigNumberish, ],
      [void],
      'view'
    >;

    

    filters: {
      
    };
  }