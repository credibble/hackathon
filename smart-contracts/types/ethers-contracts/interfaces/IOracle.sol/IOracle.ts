/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface IOracleInterface extends Interface {
    getFunction(nameOrSignature: "getCredits"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CreditToAssetSet"): EventFragment;

    encodeFunctionData(functionFragment: 'getCredits', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'getCredits', data: BytesLike): Result;
  }

  
    export namespace CreditToAssetSetEvent {
      export type InputTuple = [asset: AddressLike, credit: BigNumberish];
      export type OutputTuple = [asset: string, credit: bigint];
      export interface OutputObject {asset: string, credit: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface IOracle extends BaseContract {
    
    connect(runner?: ContractRunner | null): IOracle;
    waitForDeployment(): Promise<this>;

    interface: IOracleInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getCredits: TypedContractMethod<
      [asset: AddressLike, amount: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getCredits'): TypedContractMethod<
      [asset: AddressLike, amount: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'CreditToAssetSet'): TypedContractEvent<CreditToAssetSetEvent.InputTuple, CreditToAssetSetEvent.OutputTuple, CreditToAssetSetEvent.OutputObject>;

    filters: {
      
      'CreditToAssetSet(address,uint256)': TypedContractEvent<CreditToAssetSetEvent.InputTuple, CreditToAssetSetEvent.OutputTuple, CreditToAssetSetEvent.OutputObject>;
      CreditToAssetSet: TypedContractEvent<CreditToAssetSetEvent.InputTuple, CreditToAssetSetEvent.OutputTuple, CreditToAssetSetEvent.OutputObject>;
    
    };
  }