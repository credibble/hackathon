/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  
export declare namespace Types {
      
    export type JSONStruct = {value: string}

    export type JSONStructOutput = [value: string] & {value: string }
  
    }

  export interface IBorrowCreditInterface extends Interface {
    getFunction(nameOrSignature: "replenish" | "spend"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AddedAccessiblePool" | "CreateCredits" | "CreditReplenished" | "CreditSpent" | "DecrementedCredits" | "IncrementedCredits" | "RemovedAccessiblePool"): EventFragment;

    encodeFunctionData(functionFragment: 'replenish', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'spend', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'replenish', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'spend', data: BytesLike): Result;
  }

  
    export namespace AddedAccessiblePoolEvent {
      export type InputTuple = [to: AddressLike, pool: AddressLike];
      export type OutputTuple = [to: string, pool: string];
      export interface OutputObject {to: string, pool: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CreateCreditsEvent {
      export type InputTuple = [to: AddressLike, metadata: Types.JSONStruct, credits: BigNumberish, pools: AddressLike[]];
      export type OutputTuple = [to: string, metadata: Types.JSONStructOutput, credits: bigint, pools: string[]];
      export interface OutputObject {to: string, metadata: Types.JSONStructOutput, credits: bigint, pools: string[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CreditReplenishedEvent {
      export type InputTuple = [pool: AddressLike, borrower: AddressLike, credits: BigNumberish];
      export type OutputTuple = [pool: string, borrower: string, credits: bigint];
      export interface OutputObject {pool: string, borrower: string, credits: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CreditSpentEvent {
      export type InputTuple = [pool: AddressLike, borrower: AddressLike, credits: BigNumberish];
      export type OutputTuple = [pool: string, borrower: string, credits: bigint];
      export interface OutputObject {pool: string, borrower: string, credits: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DecrementedCreditsEvent {
      export type InputTuple = [from: AddressLike, credits: BigNumberish];
      export type OutputTuple = [from: string, credits: bigint];
      export interface OutputObject {from: string, credits: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace IncrementedCreditsEvent {
      export type InputTuple = [to: AddressLike, credits: BigNumberish];
      export type OutputTuple = [to: string, credits: bigint];
      export interface OutputObject {to: string, credits: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RemovedAccessiblePoolEvent {
      export type InputTuple = [to: AddressLike, pool: AddressLike];
      export type OutputTuple = [to: string, pool: string];
      export interface OutputObject {to: string, pool: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface IBorrowCredit extends BaseContract {
    
    connect(runner?: ContractRunner | null): IBorrowCredit;
    waitForDeployment(): Promise<this>;

    interface: IBorrowCreditInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    replenish: TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    spend: TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'replenish'): TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'spend'): TypedContractMethod<
      [borrower: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AddedAccessiblePool'): TypedContractEvent<AddedAccessiblePoolEvent.InputTuple, AddedAccessiblePoolEvent.OutputTuple, AddedAccessiblePoolEvent.OutputObject>;
getEvent(key: 'CreateCredits'): TypedContractEvent<CreateCreditsEvent.InputTuple, CreateCreditsEvent.OutputTuple, CreateCreditsEvent.OutputObject>;
getEvent(key: 'CreditReplenished'): TypedContractEvent<CreditReplenishedEvent.InputTuple, CreditReplenishedEvent.OutputTuple, CreditReplenishedEvent.OutputObject>;
getEvent(key: 'CreditSpent'): TypedContractEvent<CreditSpentEvent.InputTuple, CreditSpentEvent.OutputTuple, CreditSpentEvent.OutputObject>;
getEvent(key: 'DecrementedCredits'): TypedContractEvent<DecrementedCreditsEvent.InputTuple, DecrementedCreditsEvent.OutputTuple, DecrementedCreditsEvent.OutputObject>;
getEvent(key: 'IncrementedCredits'): TypedContractEvent<IncrementedCreditsEvent.InputTuple, IncrementedCreditsEvent.OutputTuple, IncrementedCreditsEvent.OutputObject>;
getEvent(key: 'RemovedAccessiblePool'): TypedContractEvent<RemovedAccessiblePoolEvent.InputTuple, RemovedAccessiblePoolEvent.OutputTuple, RemovedAccessiblePoolEvent.OutputObject>;

    filters: {
      
      'AddedAccessiblePool(address,address)': TypedContractEvent<AddedAccessiblePoolEvent.InputTuple, AddedAccessiblePoolEvent.OutputTuple, AddedAccessiblePoolEvent.OutputObject>;
      AddedAccessiblePool: TypedContractEvent<AddedAccessiblePoolEvent.InputTuple, AddedAccessiblePoolEvent.OutputTuple, AddedAccessiblePoolEvent.OutputObject>;
    

      'CreateCredits(address,tuple,uint256,address[])': TypedContractEvent<CreateCreditsEvent.InputTuple, CreateCreditsEvent.OutputTuple, CreateCreditsEvent.OutputObject>;
      CreateCredits: TypedContractEvent<CreateCreditsEvent.InputTuple, CreateCreditsEvent.OutputTuple, CreateCreditsEvent.OutputObject>;
    

      'CreditReplenished(address,address,uint256)': TypedContractEvent<CreditReplenishedEvent.InputTuple, CreditReplenishedEvent.OutputTuple, CreditReplenishedEvent.OutputObject>;
      CreditReplenished: TypedContractEvent<CreditReplenishedEvent.InputTuple, CreditReplenishedEvent.OutputTuple, CreditReplenishedEvent.OutputObject>;
    

      'CreditSpent(address,address,uint256)': TypedContractEvent<CreditSpentEvent.InputTuple, CreditSpentEvent.OutputTuple, CreditSpentEvent.OutputObject>;
      CreditSpent: TypedContractEvent<CreditSpentEvent.InputTuple, CreditSpentEvent.OutputTuple, CreditSpentEvent.OutputObject>;
    

      'DecrementedCredits(address,uint256)': TypedContractEvent<DecrementedCreditsEvent.InputTuple, DecrementedCreditsEvent.OutputTuple, DecrementedCreditsEvent.OutputObject>;
      DecrementedCredits: TypedContractEvent<DecrementedCreditsEvent.InputTuple, DecrementedCreditsEvent.OutputTuple, DecrementedCreditsEvent.OutputObject>;
    

      'IncrementedCredits(address,uint256)': TypedContractEvent<IncrementedCreditsEvent.InputTuple, IncrementedCreditsEvent.OutputTuple, IncrementedCreditsEvent.OutputObject>;
      IncrementedCredits: TypedContractEvent<IncrementedCreditsEvent.InputTuple, IncrementedCreditsEvent.OutputTuple, IncrementedCreditsEvent.OutputObject>;
    

      'RemovedAccessiblePool(address,address)': TypedContractEvent<RemovedAccessiblePoolEvent.InputTuple, RemovedAccessiblePoolEvent.OutputTuple, RemovedAccessiblePoolEvent.OutputObject>;
      RemovedAccessiblePool: TypedContractEvent<RemovedAccessiblePoolEvent.InputTuple, RemovedAccessiblePoolEvent.OutputTuple, RemovedAccessiblePoolEvent.OutputObject>;
    
    };
  }