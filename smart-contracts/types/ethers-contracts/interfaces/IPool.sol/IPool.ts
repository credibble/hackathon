/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface IPoolInterface extends Interface {
    getFunction(nameOrSignature: "asset" | "availableLiquidity" | "borrow" | "borrowAPY" | "cancelWithdraw" | "deposit" | "lockPeriod" | "repay" | "repayAll" | "requestWithdraw" | "totalBorrowed" | "totalShares" | "totalTVL" | "withdrawDelay"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
encodeFunctionData(functionFragment: 'availableLiquidity', values?: undefined): string;
encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'borrowAPY', values?: undefined): string;
encodeFunctionData(functionFragment: 'cancelWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'lockPeriod', values?: undefined): string;
encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'repayAll', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'requestWithdraw', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalBorrowed', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalTVL', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawDelay', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'availableLiquidity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'borrowAPY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lockPeriod', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repayAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalBorrowed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalTVL', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawDelay', data: BytesLike): Result;
  }

  

  export interface IPool extends BaseContract {
    
    connect(runner?: ContractRunner | null): IPool;
    waitForDeployment(): Promise<this>;

    interface: IPoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    asset: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    availableLiquidity: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    borrow: TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    borrowAPY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    cancelWithdraw: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    deposit: TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'payable'
    >
    

    
    lockPeriod: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    repay: TypedContractMethod<
      [tokenId: BigNumberish, amount: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    repayAll: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    requestWithdraw: TypedContractMethod<
      [tokenId: BigNumberish, shareAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    totalBorrowed: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalShares: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalTVL: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    withdrawDelay: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'asset'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'availableLiquidity'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'borrow'): TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'borrowAPY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelWithdraw'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'lockPeriod'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'repay'): TypedContractMethod<
      [tokenId: BigNumberish, amount: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'repayAll'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'requestWithdraw'): TypedContractMethod<
      [tokenId: BigNumberish, shareAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalBorrowed'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalShares'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalTVL'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'withdrawDelay'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    

    filters: {
      
    };
  }