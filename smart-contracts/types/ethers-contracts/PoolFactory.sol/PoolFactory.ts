/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace Types {
      
    export type JSONStruct = {value: string}

    export type JSONStructOutput = [value: string] & {value: string }
  

    export type RichTextStruct = {__html: string}

    export type RichTextStructOutput = [__html: string] & {__html: string }
  
    }

export declare namespace Pool {
      
    export type ConfigStruct = {symbol: string, asset: AddressLike, credit: AddressLike, lockPeriod: BigNumberish, withdrawDelay: BigNumberish, borrowAPY: BigNumberish}

    export type ConfigStructOutput = [symbol: string, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint] & {symbol: string, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint }
  
    }

  export interface PoolFactoryInterface extends Interface {
    getFunction(nameOrSignature: "create" | "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CreatedPool" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'create', values: [string, string, Types.JSONStruct, Types.RichTextStruct, Pool.ConfigStruct]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace CreatedPoolEvent {
      export type InputTuple = [pool: AddressLike, name: string, description: string, symbol: string, documents: Types.JSONStruct, terms: Types.RichTextStruct, asset: AddressLike, credit: AddressLike, lockPeriod: BigNumberish, withdrawDelay: BigNumberish, borrowAPY: BigNumberish];
      export type OutputTuple = [pool: string, name: string, description: string, symbol: string, documents: Types.JSONStructOutput, terms: Types.RichTextStructOutput, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint];
      export interface OutputObject {pool: string, name: string, description: string, symbol: string, documents: Types.JSONStructOutput, terms: Types.RichTextStructOutput, asset: string, credit: string, lockPeriod: bigint, withdrawDelay: bigint, borrowAPY: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PoolFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): PoolFactory;
    waitForDeployment(): Promise<this>;

    interface: PoolFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    create: TypedContractMethod<
      [name: string, description: string, documents: Types.JSONStruct, terms: Types.RichTextStruct, config: Pool.ConfigStruct, ],
      [string],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'create'): TypedContractMethod<
      [name: string, description: string, documents: Types.JSONStruct, terms: Types.RichTextStruct, config: Pool.ConfigStruct, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CreatedPool'): TypedContractEvent<CreatedPoolEvent.InputTuple, CreatedPoolEvent.OutputTuple, CreatedPoolEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'CreatedPool(address,string,string,string,tuple,tuple,address,address,uint256,uint256,uint256)': TypedContractEvent<CreatedPoolEvent.InputTuple, CreatedPoolEvent.OutputTuple, CreatedPoolEvent.OutputObject>;
      CreatedPool: TypedContractEvent<CreatedPoolEvent.InputTuple, CreatedPoolEvent.OutputTuple, CreatedPoolEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }